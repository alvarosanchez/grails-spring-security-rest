Once the plugin is installed, the minimum configuration is to select what strategy do you want to use: token-based flow
or api key with http basic authentication.

By default the token-based flow is enabled and the Api Key HTTP Basic is disabled

{table}
*Config key*                                                                    | *Default value*
@grails.plugin.springsecurity.rest.token.active@                                | @true@
@grails.plugin.springsecurity.rest.apiKey.active@                               | @false@

{table}

h2. Plugin configuration

{note}
This plugin depends on [Spring Security Core 2.x|http://grails-plugins.github.io/grails-spring-security-core/docs/manual/guide/newInV2.html].
Make sure your application is compatible with that version first.
{note}

This plugin is compatible by default with Spring Security core traditional, form-based authentication. The important thing
to remember is: you have to separate the filter chains, so different filters are applied on each case.

The stateless, token-based or api key based approach of this plugin is incompatible with the HTTP session-based approach of Spring Security,
core, so the trick is to identify what URL patterns have to be stateless, and what others have to be stateful (if any).

To configure the chains properly, you can use the @grails.plugin.springsecurity.filterChain.chainMap@ property:

For Token-based
{code}
grails.plugin.springsecurity.filterChain.chainMap = [
    '/api/**': 'JOINED_FILTERS,-exceptionTranslationFilter,-authenticationProcessingFilter,-securityContextPersistenceFilter',  // Stateless chain
    '/**': 'JOINED_FILTERS,-restTokenValidationFilter,-restExceptionTranslationFilter'                                          // Traditional chain
]
{code}

For Api Key based only (Be aware this example does not use the JOINED_FILTERS)

{code}
grails.plugin.springsecurity.filterChain.chainMap = [
        '/api/**': 'restApiKeyValidationFilter,restApiKeyExceptionTranslationFilter,filterInvocationInterceptor',
        '/**': 'JOINED_FILTERS,-restApiKeyValidationFilter,-restApiKeyExceptionTranslationFilter'
]
{code}

To understand this syntax, please read the
[Spring Security Core documentation|http://grails-plugins.github.io/grails-spring-security-core/guide/filters.html].
Long story short: @JOINED_FILTERS@ refers to all the configured filters. The minus (@-@) notation means all the previous values
but the neglected one.

So the first chain applies all the filters except the stateful ones. The second one applies all the filters but the stateless ones.

{note}
Make sure that the stateless chain applies not only to your REST controllers, but also to the URL's where this plugin
filters are listening: by default, @/api/login@ for [authentication|guide:authentication], @/api/logout@ for
[logout|guide:authentication] and @/api/validate@ for [token validation|guide:tokenValidation].
{note}

The difference is that, in a traditional form-based authentication, Spring Security will respond with an HTTP 302 redirect
to the login controller. That doesn't work for an API, so in the stateless approach, an HTTP 401 response will be sent back.
